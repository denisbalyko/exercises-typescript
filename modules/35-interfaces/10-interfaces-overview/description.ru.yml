---
name: Об интерфейсах
theory: |

  Интерфейс - конструкция языка TypeScript, которая используется для описания объектов и функций (так как они тоже объекты):

  ```typescript
  interface User {
    firstName: string;
    pointsCount: number;
  }

  const user: User = {
    firstName: 'Mark',
    pointsCount: 100,
  };
  ```

  Визуально, интерфейс выглядит как определение алиаса типа. Более того, алиас типа и интерфейсы взаимозаменяемы почти во всех ситуациях. Документация TypeScript говорит о том, что мы можем легко выбирать, что использовать в зависимости от ситуации. В таком случае возникает вопрос, зачем вообще нужна новая конструкция, когда уже есть одна?

  С практической точки зрения, главная особенность интерфейсов связана с классами. Классы реализующие интерфейсы, содержат внутри себя свойства и методы, указанные в реализуемом интерфейсе:

  ```typescript
  interface Countable {
    count(): number;
  }

  class SchoolClass implements Countable {
    // Тут какая-то логика
    count(): number {
      // Обязательно создать этот метод, так как он указан в интерфейсе
    }
  }

  const sc = new SchoolClass();
  // Возвращает число студентов в классе
  sc.count();
  ```

  Теперь во всех функциях, где объекты используются только для того, чтобы посчитать количество чего-либо внутри них, можно указывать `Countable` вместо `SchoolClass`:

  ```typescript
  // А не function doSomething(obj: SchoolClass)
  function doSomething(obj: Countable) {
    // Где-то внутри вызывается
    obj.count();
  }
  ```

  Почему это важно? Так функция становится более универсальная. Мы можем передать любые объекты, соответствующие `Countable`, а не только `SchoolClass`. В программировании такая возможность называется полиморфизмом подтипов ([Subtyping](https://en.wikipedia.org/wiki/Subtyping))

instructions: |

  FIXME: В процессе ...

# tips:
